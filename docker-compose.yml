services:
  django:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    container_name: django_app
    command: >
      sh -c "python /app/manage.py migrate && python /app/manage.py makemigrations && python /app/manage.py fetch_users && python /app/manage.py collectstatic --noinput && gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./app:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 3s
      timeout: 3s
      retries: 20
      start_period: 10s
    restart: on-failure
    networks:
      - app-network
  
  postgres:
    image: postgres:15
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - app-network
  
  redis:
    image: redis:7
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network
  
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - static_volume:/static
    depends_on:
      django:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume: